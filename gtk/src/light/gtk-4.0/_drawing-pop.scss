// Drawing mixins

// generic drawing of more complex things



@mixin headerbar_fill($c:$headerbar_bg_color, $ov: none) {
//
// headerbar fill
//
// $c:  base color
// $ov: a background layer for background shorthand (hence no commas!)
//
  @if $ov != none { background: $c $ov; }
  @else { background: $c; }

}

@mixin overshoot($p, $t:normal, $c:$selected_bg_color) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_small_gradient_length: 3%;
  $_big_gradient_length: 50%;

  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==right or $p==left {
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: transparentize($c, 0.93);

  @if $c==$fg_color {
    $_small_gradient_color: darken($borders_color, 10%);
    $_big_gradient_color: transparentize($fg_color, 0.93);

    @if $t==backdrop { $_small_gradient_color: $backdrop_borders_color; }
  }

  $_small_gradient: radial-gradient(farthest-side at $p,
                                    $_small_gradient_color 85%,
                                    transparentize($_small_gradient_color, 1));

  $_big_gradient: radial-gradient(farthest-side at $p,
                                  $_big_gradient_color,
                                  transparentize($_big_gradient_color, 1));

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $p;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}

/***************************
 * Check and Radio buttons *
 ***************************/

 @mixin check($t, $c:$checkradio_bg_color, $tc:$checkradio_fg_color, $checked: false) {
  // Check/Radio drawing function
  //
  // $t:        check/radio type,
  // $c:        base button color for colored* types
  // $tc:       optional text color for colored* types
  // $checked:  bool to chose between checked/unchecked
  //
  // possible $t values:
  // normal, hover, active, insensitive, backdrop, backdrop-insensitive, menu

  $_border_color: if($c==$checkradio_bg_color, $checkradio_borders_color, $alt_borders_color);
  $_dim_border_color: transparentize($_border_color, if($variant == 'light', 0.3, 0.7));

  @if $t==normal  {
    background-clip: if($checked, border-box, padding-box);
    background-image: linear-gradient(to bottom, lighten($c, 5%) 20%, $c 90%);
    border-color: $_border_color;
    box-shadow: 0 1px transparentize(black, 0.95);
    color: $tc;
  }

  @if $t==hover {
    background-image: if($c == white, image(darken($c, 5%)), linear-gradient(to bottom, lighten($c, 9%) 10%, lighten($c, 4%) 90%));
  }

  @if $t==active {
    box-shadow: inset 0 1px if($variant == 'light', rgba(0, 0, 0, 0.2), black);
    background-image: if($c == white, image(darken($c, 15%)), image(darken($c, 5%)));
  }

  @if $t==insensitive {
    box-shadow: none;
    color: transparentize($tc, 0.3);
  }

  @if $t==backdrop {
    background-image: image($c);
    box-shadow: none;
    color: $tc;
  }

  @if $t==backdrop-insensitive {
    box-shadow: none;
    color: transparentize($tc, 0.3);
  }

  @if $t==menu {
   transform: scale(0.8);
   border-width: 1.2px;
   border-color: transparent;
   box-shadow: none;
   background-image: image(transparent);
   color: $tc;
  }

  @if $t==menu-active {
   transform: scale(0.8);
   border-width: 1.2px;
   color: $tc;
   box-shadow: none;
   background-image: image(transparent);
  }
}

// Helper for drawing circular buttons
@mixin draw_circle($c, $size:24px) {
  $button_size: $size + 2px * 2;
  $circle_size: 20px / $button_size / 2;

  background-image: -gtk-gradient(radial,
                                  center center, 0,
                                  center center, $circle_size,
                                  to($c),
                                  to(transparent));

  &:hover {
    $_bg: if($c!=$selected_bg_color, transparentize(white, 0.8), lighten($c, 3%));
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, $circle_size,
                                    to($_bg),
                                    to(transparent));

    &:backdrop {
      $_bg: transparentize(white, 0.9);
      background-image: -gtk-gradient(radial,
                                      center center, 0,
                                      center center, $circle_size,
                                      to($_bg),
                                      to(transparent));
    }
  }

  &:active {
    $_bg: if($c!=$selected_bg_color, transparentize(white, 0.9), darken($c, 2%));
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, $circle_size,
                                    to($_bg),
                                    to(transparent));
  }
}
